name: CI/CD Pipeline

on:
  workflow_dispatch:  # Allows you to trigger the workflow manually
  push:
    branches:
      - main  # Trigger pipeline on push to the main branch
      - feature-model-training  # Trigger pipeline for model training
      - feature-api  # Trigger pipeline for API changes
      - feature-frontend  # Trigger pipeline for frontend changes

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Lint Code
      run: |
        echo "Linting Code"
        # Optionally, add linter command (e.g., flake8, pylint)
        flake8 .

    - name: Start Flask Server
      run: |
        echo "Starting Flask server"
        nohup python app.py &
      # Ensure Flask server starts in the background
      
    - name: Wait for Flask Server
      run: |
        echo "Waiting for server to be available..."
        sleep 5  # Adjust the sleep time if the server needs more time to start
      
    - name: Run Unit Tests
      run: |
        echo "Running Unit Tests"
        python test.py  # Run the tests after the server is up

    - name: Build Docker Image
      run: |
        echo "Building Docker image"
        docker build -t your-image-name .

    - name: Deploy to Development
      run: echo "Deploying to development environment"

    - name: Deploy to Staging
      if: github.ref == 'refs/heads/main' && success()  # Only deploy to staging if tests pass
      run: echo "Deploying to staging environment"

    - name: Deploy to Production
      if: github.ref == 'refs/heads/main' && success()  # Only deploy to production if staging is successful
      run: |
        echo "Deploying to production environment"
        vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
